package com.packtpub.vertx.footballplayermicroservice.dao;

import com.packtpub.vertx.footballplayermicroservice.model.FootballPlayer;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.core.buffer.Buffer;
import io.vertx.reactivex.core.file.FileSystem;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;
import java.text.MessageFormat;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

/**
 * DAO class that implements the JDBC methods needed to implement the CRUD
 * services in a reactive manner.
 *
 * @author Mauro Vocale
 * @version 1.0.0 15/10/2018
 */
public class FootballPlayerReactiveDAO {

    public Single<SQLConnection> connect(JDBCClient jdbc) {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(
                true)));
    }

    public Single<SQLConnection> createTableIfNeeded(FileSystem fileSystem,
            SQLConnection connection) {
        return fileSystem.rxReadFile("schema.sql")
                .map(Buffer::toString)
                .flatMapCompletable(connection::rxExecute)
                .toSingleDefault(connection);
    }

    public Single<SQLConnection> createSomeDataIfNone(FileSystem fileSystem,
            SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM football_player")
                .flatMap(rs -> {
                    if (rs.getResults().isEmpty()) {
                        return fileSystem.rxReadFile("data.sql")
                                .map(Buffer::toString)
                                .flatMapCompletable(connection::rxExecute)
                                .toSingleDefault(connection);
                    } else {
                        return Single.just(connection);
                    }
                });
    }

    public Single<List<FootballPlayer>> query(SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM football_player")
                .map(rs -> rs.getRows().stream().map(FootballPlayer::new).
                collect(Collectors.toList()))
                .doFinally(connection::close);
    }

    public Single<FootballPlayer> queryOne(SQLConnection connection, String id) {
        String sql = "SELECT * FROM football_player WHERE id = ?";
        return connection.rxQueryWithParams(sql, new JsonArray().add(Integer.
                valueOf(id)))
                .doFinally(connection::close)
                .map(rs -> {
                    List<JsonObject> rows = rs.getRows();
                    if (rows.isEmpty()) {
                        throw new NoSuchElementException(MessageFormat.format(
                                "No Football player with id {0}",
                                id));
                    } else {
                        JsonObject row = rows.get(0);
                        return new FootballPlayer(row);
                    }
                });
    }

    public Single<FootballPlayer> insert(SQLConnection connection,
            FootballPlayer footballPlayer, boolean closeConnection) {
        String sql
                = "INSERT INTO football_player (name, surname, age, team, position, price) VALUES (?, ?, ?, ?, ?, ?)";
        return connection
                .rxUpdateWithParams(sql, new JsonArray().add(
                        footballPlayer.getName()).add(footballPlayer.
                        getSurname())
                        .add(footballPlayer.getAge()).add(footballPlayer.
                        getTeam())
                        .add(footballPlayer.getPosition()).add(footballPlayer.
                        getPrice().intValue()))
                .map(res -> new FootballPlayer(res.getKeys().
                getInteger(0),
                footballPlayer.getName(), footballPlayer.getSurname(),
                footballPlayer.getAge(), footballPlayer.getTeam(),
                footballPlayer.getPosition(), footballPlayer.getPrice()))
                .doFinally(() -> {
                    if (closeConnection) {
                        connection.close();
                    }
                });
    }

    public Completable delete(SQLConnection connection, String id) {
        String sql = "DELETE FROM football_player WHERE id = ?";
        JsonArray params = new JsonArray().add(Integer.valueOf(id));
        return connection.rxUpdateWithParams(sql, params)
                .doFinally(connection::close)
                .flatMapCompletable(ur -> ur.getUpdated() == 0 ? Completable
                .error(new NoSuchElementException(MessageFormat.format(
                        "No Football player with id {0}",
                        id)))
                : Completable.complete()
                );
    }

    public Single<FootballPlayer> update(SQLConnection connection, String id,
            FootballPlayer footballPlayer) {
        String sql
                = "UPDATE football_player SET name = ?, surname = ?, age = ?, team = ?, position = ?, price = ? WHERE id = ?";
        return connection
                .rxUpdateWithParams(sql, new JsonArray().add(
                        footballPlayer.getName()).add(footballPlayer.
                        getSurname())
                        .add(footballPlayer.getAge()).add(footballPlayer.
                        getTeam())
                        .add(footballPlayer.getPosition()).add(footballPlayer.
                        getPrice().intValue()).add(Integer.valueOf(id)))
                .map(res -> new FootballPlayer(res.getKeys().
                getInteger(0),
                footballPlayer.getName(), footballPlayer.getSurname(),
                footballPlayer.getAge(), footballPlayer.getTeam(),
                footballPlayer.getPosition(), footballPlayer.getPrice()))
                .doFinally(() -> {
                    connection.close();
                });
    }

}
